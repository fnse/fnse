%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Srecko) ()
%%Title: (helmet 48.eps)
%%CreationDate: 9/17/2012 1:16 PM
%%BoundingBox: 19 155 592 638
%%HiResBoundingBox: 19.6084 155.1221 591.8867 637.0107
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 21.7202 43.2002 590.2803 748.7998
%AI3_DocumentPreview: Header
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -32 669 1 922 659 26 0 0 67 79 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MP
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 O
0 0 0 1 k
0 J 0 j 1 w 4 M []0 d1 XR
127.9624 156.2764 m
170.916 166.0283 207.1909 190.8711 245.4551 201.8867 c
269.9844 208.9502 295.335 209.0742 322.9414 194.2256 c
323.4609 226.4238 302.4307 249.0635 291.041 267.6152 c
277.9771 288.8838 286.5835 309.7441 298.0386 330.1777 c
316.3145 362.7695 342.0918 391.3535 309.7686 453.106 c
302.0781 467.0664 290.4956 478.1543 276.6411 486.3794 c
277.6143 494.3545 277.9658 502.5103 277.4219 510.855 c
305.4497 497.1919 330.5283 469.5234 361.8799 487.3232 c
380.9619 442.1401 350.8213 366.958 408.9658 350.7041 c
414.8281 332.0117 467.0264 295.8604 524.0088 342.1309 c
579.3076 351.292 620.0029 418.1011 567.5977 460.2202 c
545.9902 477.1377 494.9063 476.8262 512.499 414.1919 c
523.2461 427.2192 534.7891 432.2104 539.8379 427.415 c
568.6943 400.0078 502.2852 375.7432 473.1748 427.0488 c
479.2363 486.6987 477.5479 577.4155 412.7148 603.0449 c
351.2285 679.2461 228.7808 616.6025 258.6235 520.0957 c
251.3823 514.499 244.1191 507.228 239.4155 500.6812 c
186.6064 512.0776 123.646 493.8423 102.8555 445.2559 c
71.9849 432.5073 36.5669 390.1592 19.6084 357.5879 c
37.187 317.1553 80.9897 278.9932 102.8477 273.3857 c
110.3359 260.459 112.1396 252.8047 111.0186 244.3984 c
31.1763 219.8115 61.375 144.9707 127.9624 156.2764 c
127.9624 156.2764 l
f
0 0 0 0.2 k
247.7563 211.9229 m
268.5693 216.9688 290.2314 217.0742 314.3535 206.9834 c
312.8701 215.0059 309.6318 222.6533 305.6211 229.9561 c
281.5996 236.9424 260.0249 233.9082 239.0303 226.7012 c
241.5752 221.54 244.4824 216.5947 247.7563 211.9229 c
247.7563 211.9229 l
f
129.0977 165.7539 m
170.3096 175.1123 204.6792 199.4824 241.1323 210.1494 c
237.8545 214.4678 234.9692 219.2197 232.4644 224.3125 c
200.7515 212.1377 169.9175 191.7344 133.377 183.4336 c
83.5493 172.4023 57.4912 204.7764 104.5874 228.8604 c
68.2495 206.0713 86.7178 180.1855 132.8442 190.3994 c
168.5347 198.5049 198.7778 218.1592 229.7129 230.4063 c
213.5464 269.4209 217.5859 323.5156 237.3828 346.4414 c
221.9199 318.209 219.938 270.957 236.1953 232.8486 c
256.6636 240.1816 277.6216 243.7266 300.8076 238.0459 c
280.6919 269.832 266.7617 283.7881 284.3037 320.4297 c
302.0054 357.3916 335.5781 388.4355 303.6934 446.1084 c
266.5547 513.2827 143.9941 511.3701 111.0107 441.6104 c
116.8696 410.0479 194.6689 387.4307 209.6479 387.4004 c
209.1118 385.7969 209.3833 384.9951 208.8491 383.3877 c
166.6719 385.876 110.7466 410.4282 104.0859 437.625 c
78.7358 422.1382 42.0513 387.1289 29.3364 357.5654 c
45.1978 321.0908 82.3843 290.9707 103.8862 282.2637 c
113.3633 305.3096 181.4634 338.4697 222.7622 343.7393 c
223.2959 342.1309 223.0229 341.3291 223.5605 339.7256 c
180.0518 329.6973 127.3008 301.4248 109.8066 278.3281 c
126.5283 259.4688 121.6177 219.0566 102.3867 204.4424 c
108.3105 217.3643 112.5322 224.8701 113.3228 237.666 c
45.5278 212.7803 67.1431 155.2354 129.0977 165.7539 c
129.0977 165.7539 l
f
0 0 0 0.4 k
225.9419 325.2676 m
228.8135 333.6826 232.6499 340.959 237.3828 346.4414 c
233.938 340.1533 231.1611 332.915 229.1069 325.0547 c
229.8291 325.0469 l
250.5371 324.8916 267.3237 341.5518 267.3237 362.2578 c
267.3237 382.958 250.5371 399.873 229.8291 400.0288 c
219.394 400.1084 209.9531 395.9097 203.1548 389.0742 c
205.9248 388.2979 208.1528 387.7354 209.6479 387.4004 c
215.8477 375.9531 218.229 363.0713 222.7622 343.7393 c
223.2959 342.1309 223.0229 341.3291 223.5605 339.7256 c
180.0518 329.6973 127.3008 301.4248 109.8066 278.3281 c
110.6772 277.3457 111.4907 276.293 112.2456 275.1992 c
131.251 297.0361 172.0698 315.8711 212.1274 329.6318 c
216.3232 327.3438 220.98 325.8164 225.9419 325.2676 c
225.9419 325.2676 l
f
0 0 0 1 k
227.8599 400.9912 m
247.4771 400.9912 263.3828 385.0859 263.3828 365.4727 c
263.3828 345.8555 247.4771 329.9502 227.8599 329.9502 c
208.2466 329.9502 192.3413 345.8555 192.3413 365.4727 c
192.3413 385.0859 208.2466 400.9912 227.8599 400.9912 c
227.8599 400.9912 l
f
0 0 0 0.5 k
226.8213 395.3716 m
242.7603 395.3716 255.6836 382.4473 255.6836 366.5127 c
255.6836 350.5723 242.7603 337.6484 226.8213 337.6484 c
210.8848 337.6484 197.9609 350.5723 197.9609 366.5127 c
197.9609 382.4473 210.8848 395.3716 226.8213 395.3716 c
226.8213 395.3716 l
f
0 0 0 0.2 k
225.4814 393.3281 m
239.8477 393.3281 251.4956 381.6807 251.4956 367.3184 c
251.4956 352.9512 239.8477 341.3047 225.4814 341.3047 c
211.1182 341.3047 199.4707 352.9512 199.4707 367.3184 c
199.4707 381.6807 211.1182 393.3281 225.4814 393.3281 c
225.4814 393.3281 l
f
0 0 0 1 k
226.8223 380.9238 m
234.7832 380.9238 241.2368 374.4688 241.2368 366.5117 c
241.2368 358.5498 234.7832 352.0947 226.8223 352.0947 c
218.8633 352.0947 212.4092 358.5498 212.4092 366.5117 c
212.4092 374.4688 218.8633 380.9238 226.8223 380.9238 c
226.8223 380.9238 l
f
0 0 0 0.5 k
225.8667 377.1787 m
231.23 377.1787 235.5791 372.8291 235.5791 367.4668 c
235.5791 362.1025 231.23 357.7539 225.8667 357.7539 c
220.5034 357.7539 216.1553 362.1025 216.1553 367.4668 c
216.1553 372.8291 220.5034 377.1787 225.8667 377.1787 c
225.8667 377.1787 l
f
0 0 0 1 k
45.7744 355.4385 m
56.7148 332.7852 77.2549 311.5293 94.6411 297.7949 c
97.8027 301.4541 102.0317 305.2393 107.0552 309.0322 c
93.7598 321.7432 81.0298 343.2393 77.894 355.4385 c
45.7744 355.4385 l
45.7744 355.4385 l
f
90.939 355.4385 m
97.2842 339.1699 106.2168 325.6895 114.9932 314.6035 c
119.9473 317.8604 125.3921 321.0732 131.1558 324.1689 c
124.4116 333.2256 118.7285 344.9307 115.915 355.4385 c
90.939 355.4385 l
90.939 355.4385 l
f
131.6172 355.4385 m
133.0767 345.6787 136.0957 336.752 141.2212 329.3076 c
146.8438 332.0303 152.6509 334.6152 158.5063 336.9961 c
156.0161 342.8398 154.0234 349.1592 152.9453 355.4385 c
131.6172 355.4385 l
131.6172 355.4385 l
f
*u
1 D
166.1104 355.4385 m
166.854 350.3555 168.1748 345.6631 169.791 341.3154 c
175.6084 343.3984 181.3804 345.2461 186.9697 346.7891 c
186.2407 349.6152 185.6665 352.5166 185.2417 355.4385 c
166.1104 355.4385 l
166.1104 355.4385 l
f
187.0864 340.9082 m
187.5898 340.9561 188.1353 340.9912 188.7192 341.0244 c
188.5811 341.4131 l
187.0864 340.9082 l
187.0864 340.9082 l
f
*U
0 D
132.6841 365.1592 m
135.1021 374.084 137.8384 381.6699 142.604 389.7383 c
148.1865 387.4639 153.9834 385.4336 159.8525 383.6914 c
157.4751 377.8379 155.9287 371.4775 154.8838 365.1592 c
132.6841 365.1592 l
132.6841 365.1592 l
f
166.2988 365.1592 m
167.4785 370.5664 168.6948 375.3838 170.8252 380.792 c
176.8647 379.3975 182.8901 378.334 188.7515 377.6475 c
187.4453 373.6455 186.4868 369.4268 185.8447 365.1592 c
166.2988 365.1592 l
166.2988 365.1592 l
f
45.7241 365.1592 m
58.1743 385.7744 79.4731 408.2861 97.146 421.6479 c
100.3765 416.7183 105.0479 411.9673 110.7573 407.5176 c
96.9351 395.5 82.6924 375.7764 78.0063 365.1592 c
45.7241 365.1592 l
45.7241 365.1592 l
f
91.3198 365.1592 m
98.9141 379.6377 108.3037 391.1465 118.3574 402.1494 c
122.7461 399.3247 127.5337 396.6602 132.5933 394.2031 c
126.7173 386.3672 119.9692 375.0313 117.1162 365.1592 c
91.3198 365.1592 l
91.3198 365.1592 l
f
0 0 0 0.4 k
101.9917 286.2227 m
118.5977 310.8428 154.6587 326.1113 198.5703 341.3975 c
198.0332 343.002 195.3623 344.6104 194.8276 346.2188 c
166.9917 341.7861 100.0645 309.8779 101.9917 286.2227 c
101.9917 286.2227 l
f
0 0 0 0 k
101.9917 428.7188 m
118.5977 407.0938 152.2446 390.8281 196.1563 383.459 c
195.6196 381.7578 194.0186 381.8105 193.4854 380.1064 c
165.6494 379.5176 101.668 403.3755 101.9917 428.7188 c
101.9917 428.7188 l
f
31.6782 357.4561 m
41.4502 356.7256 168.1016 357.7744 188.7788 359.9043 c
182.6304 363.1221 74.4351 364.3633 35.7822 363.2666 c
34.1357 361.5771 32.4971 359.0869 31.6782 357.4561 c
31.6782 357.4561 l
f
0 0 0 1 k
226.8213 394.2266 m
230.146 394.2266 232.8413 391.5303 232.8413 388.2061 c
232.8413 384.8818 230.146 382.1855 226.8213 382.1855 c
223.4971 382.1855 220.8008 384.8818 220.8008 388.2061 c
220.8008 391.5303 223.4971 394.2266 226.8213 394.2266 c
226.8213 394.2266 l
f
0 0 0 0.2 k
226.0498 391.3916 m
227.6353 391.3916 228.9204 390.1045 228.9204 388.5195 c
228.9204 386.9346 227.6353 385.6484 226.0498 385.6484 c
224.4644 385.6484 223.1787 386.9346 223.1787 388.5195 c
223.1787 390.1045 224.4644 391.3916 226.0498 391.3916 c
226.0498 391.3916 l
f
0 0 0 0 k
225.3525 390.7559 m
226.062 390.7559 226.6372 390.1807 226.6372 389.4727 c
226.6372 388.7617 226.062 388.1865 225.3525 388.1865 c
224.6431 388.1865 224.0679 388.7617 224.0679 389.4727 c
224.0679 390.1807 224.6431 390.7559 225.3525 390.7559 c
225.3525 390.7559 l
f
0 0 0 0.2 k
225.0605 375.9648 m
229.3115 375.9648 232.7583 372.5186 232.7583 368.2686 c
232.7583 364.0176 229.3115 360.5713 225.0605 360.5713 c
220.8101 360.5713 217.3633 364.0176 217.3633 368.2686 c
217.3633 372.5186 220.8101 375.9648 225.0605 375.9648 c
225.0605 375.9648 l
f
0 0 0 0 k
223.7935 374.5 m
226.3872 374.5 228.4902 372.3975 228.4902 369.8037 c
228.4902 367.2109 226.3872 365.1064 223.7935 365.1064 c
221.2002 365.1064 219.0967 367.2109 219.0967 369.8037 c
219.0967 372.3975 221.2002 374.5 223.7935 374.5 c
223.7935 374.5 l
f
0 0 0 0.3 k
226.7227 230.8525 m
207.7715 261.9297 219.1436 315.5527 223.7793 325.5664 c
219.6304 326.2773 215.7026 327.6826 212.1274 329.6318 c
197.5073 324.6064 182.7959 318.8984 169.0723 312.626 c
166.502 295.3018 170.9199 272.6045 177.7432 253.2881 c
169.3804 267.0078 163.6563 283.9297 163.127 301.9229 c
155.7476 265.7998 180.1426 236.7578 195.4819 218.9209 c
204.8677 223.8145 220.9551 231.6738 226.7227 230.8525 c
226.7227 230.8525 l
f
0 0 0 0 k
243.8223 220.0869 m
265.2949 226.0977 288.8335 230.1963 309.1699 218.8096 c
304.3071 237.7627 262.5112 234.9219 240.4644 226.2217 c
241.5239 224.1377 242.6455 222.0898 243.8223 220.0869 c
243.8223 220.0869 l
f
130.4336 175.3975 m
170.2876 184.4512 199.8838 205.1074 234.7075 216.5723 c
233.5317 218.5117 232.4277 219.9785 231.3828 222.0439 c
197.5757 210.2793 166.8213 189.0313 128.0313 180.2217 c
109.4248 176.1025 56.8091 184.3311 88.6089 221.752 c
51.6406 193.125 90.4668 166.5488 130.4336 175.3975 c
130.4336 175.3975 l
f
0.2 1 1 0 k
265.3237 520.7461 m
240.4609 605.9019 335.4941 660.8955 400.0332 608.0474 c
382.0078 610.4395 361.1406 607.064 346.0713 596.3447 c
453.9229 624.2173 473.292 525.3257 467.5879 435.147 c
454.0498 451.5815 454.9971 501.1563 423.8154 514.0557 c
440.3633 495.9072 446.4277 469.3125 453.6582 448.2173 c
463.8643 418.4868 492.1611 385.1152 527.0068 389.6807 c
553.1729 393.1006 567.7646 427.6514 554.5156 447.2153 c
556.0547 436.0029 555.1475 431.709 551.1123 421.4839 c
547.4707 436.8228 531.9463 447.7847 516.2002 426.8628 c
510.541 471.2622 544.041 465.4404 559.0938 456.1226 c
612.4355 423.1514 574.25 357.9492 523.0293 349.4668 c
525.6963 354.6582 534.5088 372.8594 534.5752 385.6875 c
519.1602 346.2227 490.1074 312.5762 439.5781 334.916 c
404.7744 350.3057 410.8057 390.0371 416.3057 420.8862 c
404.9561 403.3682 403.2637 378.8564 408.4688 359.7168 c
339.6016 383.1943 425.4443 488.2417 319.9844 535.4063 c
332.9307 524.6689 349.7031 511.4023 358.2617 492.645 c
332.8477 483.2256 308.3516 502.6367 285.3276 514.6406 c
291.5669 518.1509 302.6265 521.3921 309.9375 520.353 c
298.4092 527.7432 281.8467 515.6973 274.2061 515.4717 c
290.6812 570.0078 355.6055 577.9678 393.7285 561.4385 c
353.043 584.7188 282.7754 569.4165 269.5996 516.1602 c
267.5522 516.8877 265.9082 518.2627 265.3237 520.7461 c
265.3237 520.7461 l
f
0 0 0 0.4 k
130.9707 168.167 m
170.8252 177.2207 202.2944 199.7539 237.1177 211.2197 c
221.4736 214.3145 160.2881 172.8213 115.4614 170.6318 c
98.7646 169.8154 80.4238 175.4307 76.3008 187.4668 c
76.7866 171.9648 103.3062 161.4629 130.9707 168.167 c
130.9707 168.167 l
f
311.5771 209.9678 m
306.1802 227.0449 257.4292 226.3477 246.0835 216.0391 c
269.7124 217.4189 290.8628 221.5645 311.5771 209.9678 c
311.5771 209.9678 l
f
0 0 0 0.1 k
100.7832 199.6484 m
130.6987 227.792 124.873 265.1094 114.6523 277.8242 c
120.7715 284.1982 128.7129 290.3037 137.896 296.085 c
152.4517 268.8008 143.3081 219.375 120.3145 200.0508 c
126.4561 208.9248 130.7246 219.5215 133.3418 230.2178 c
126.1943 215.6836 116.3433 205.4727 100.7832 199.6484 c
100.7832 199.6484 l
f
0 0 0 0.4 k
131.5044 192.0039 m
171.3579 201.0566 192.6577 219.8398 227.4805 231.3057 c
219.0127 235.9238 146.8398 200.8535 129.1016 196.8281 c
111.832 193.5146 74.2026 190.7588 106.002 228.1816 c
68.7583 200.6748 91.0913 184.9111 131.5044 192.0039 c
131.5044 192.0039 l
f
0 0 0 0 k
109.6094 205.4063 m
128.6455 232.9141 127.6704 265.2627 116.7793 277.1953 c
135.873 276.2266 145.709 235.752 109.6094 205.4063 c
109.6094 205.4063 l
f
0 0 0 0.4 k
223.2568 233.8018 m
210.4126 254.0957 209.563 298.1748 221.4312 323.8076 c
209.292 315.0732 190.3711 262.8057 223.2568 233.8018 c
223.2568 233.8018 l
f
0 0 0 0 k
237.9702 238.0928 m
233.7402 256.8359 227.4341 291.043 235.8789 323.0049 c
227.9316 315.0313 218.668 271.9961 237.9702 238.0928 c
237.9702 238.0928 l
f
0 0 0 0.1 k
281.9663 469.2881 m
244.8237 481.1997 183.3657 456.2568 159.2681 427.6479 c
167.1484 447.001 197.9063 470.9063 232.9189 475.2437 c
198.0806 478.1323 150.085 453.6978 140.5972 422.7295 c
130.6665 427.6406 120.644 438.2095 115.6504 444.0322 c
125.791 468.4966 190.1094 525.457 281.9663 469.2881 c
281.9663 469.2881 l
f
0 0 0 0 k
237.6187 484.4839 m
208.3916 490.397 155.4561 478.0933 118.6108 445.3237 c
139.064 480.814 191.3999 501.9326 237.6187 484.4839 c
237.6187 484.4839 l
f
0 0 0 0.3 k
250.8018 240.8965 m
263.3828 245.9561 286.4092 245.1709 295.9907 241.2617 c
276.5654 271.959 265.2627 283.5234 281.0293 318.8867 c
299.2725 359.7725 335.7363 398.2109 290.8516 457.8936 c
302.5142 427.6221 297.3633 402.8135 286.7539 380.2578 c
291.8462 400.6455 289.7666 429.8984 277.4722 452.5366 c
288.3145 401.5283 282.6016 375.4814 271.4365 353.1035 c
252.7104 315.5625 226.8452 283.6172 250.8018 240.8965 c
250.8018 240.8965 l
f
0 0 0 0.4 k
297.0625 239.9678 m
289.5229 253.8057 249.4048 249.1221 238.0581 237.6357 c
254.333 241.7354 278.355 247.4014 297.0625 239.9678 c
297.0625 239.9678 l
f
287.7012 247.4229 m
270.6929 274.2959 262.6704 285.6895 276.1802 316.6182 c
292.9897 355.0928 328.165 384.999 300.481 440.7539 c
309.0732 384.9844 291.8315 366.0156 277.1387 339.7256 c
280.1919 348.9736 283.1719 358.7949 285.1099 369.8721 c
268.5039 334.9551 230.5444 267.1934 287.7012 247.4229 c
287.7012 247.4229 l
f
0 0 0 0 k
44.1519 365.1592 m
51.6914 378.6904 73.0488 407.6445 100.2275 427.8511 c
77.582 422.668 46.1416 383.8555 35.6665 365.1592 c
44.1519 365.1592 l
44.1519 365.1592 l
f
89.542 365.1592 m
96.5181 378.1055 104.4053 391.9141 115.7485 402.1382 c
101.2109 396.9082 89.0371 382.8418 79.894 365.1592 c
89.542 365.1592 l
89.542 365.1592 l
f
130.7134 365.1592 m
131.6968 371.957 135.1704 383.6914 138.8838 390.6172 c
129.6353 386.625 122.3945 374.4023 118.7827 365.1592 c
130.7134 365.1592 l
130.7134 365.1592 l
f
164.8765 365.1592 m
165.1772 369.6631 166.1719 377.9463 168.1748 382.0322 c
162.2627 379.1143 158.0703 371.165 156.3535 365.1592 c
164.8765 365.1592 l
164.8765 365.1592 l
f
0 0 0 0.4 k
42.5444 355.4385 m
49.6006 341.4023 70.8999 310.7646 98.8877 291.7588 c
78.0859 291.4141 41.0669 335.0205 33.6992 355.4385 c
42.5444 355.4385 l
42.5444 355.4385 l
f
87.3716 355.4385 m
89.8066 346.4766 102.249 322.084 113.6064 311.8447 c
98.0645 316.9238 84.5581 341.9248 79.4697 355.4385 c
87.3716 355.4385 l
87.3716 355.4385 l
f
128.873 355.4385 m
129.1416 349.8125 132.9678 335.4756 137.5444 328.9922 c
128.3506 332.958 120.3145 344.5166 117.6792 355.4385 c
128.873 355.4385 l
128.873 355.4385 l
f
163.7725 355.4385 m
163.5913 351.9414 164.6289 344.0771 166.3022 339.8525 c
160.4404 342.7441 157.1553 348.125 154.9629 355.4385 c
163.7725 355.4385 l
163.7725 355.4385 l
f
246.5693 497.5806 m
249.8467 502.4985 255.854 509.458 261.2012 513.4136 c
262.7612 512.8037 265.7266 511.5981 268.6016 509.6353 c
268.2568 503.6313 266.562 496.7236 265.5674 490.4917 c
259.4043 493.3931 253.1211 495.7158 246.5693 497.5806 c
246.5693 497.5806 l
f
0 0 0 0.1 k
250.0464 498.9619 m
251.8877 502.3276 257.3398 508.833 261.5327 511.6748 c
263.8301 504.5977 257.7344 495.6382 250.0464 498.9619 c
250.0464 498.9619 l
f
0 1 1 0 k
269.9814 522.9351 m
240.5479 592.6133 318.5938 650.29 377.4824 616.7441 c
361.4883 618.8711 339.4873 605.9561 340.832 592.9658 c
388.4619 609.1763 426.6963 596.897 446.623 551.0273 c
425.2832 567.4932 396.7129 574.6616 389.3535 573.6411 c
446.6484 556.7593 462.623 516.6953 459.0908 461.6978 c
452.7002 489.6899 438.0313 518.416 407.1475 522.3604 c
421.8281 506.2485 435.2383 476.75 441.6621 458.0356 c
447.4072 441.2803 458.3301 420.7368 473.2549 405.9204 c
453.2266 416.8818 432.1885 445.1611 423.9775 469.8428 c
426.9834 437.3359 459.7119 399.3066 495.0254 388.9922 c
477.835 387.876 459.001 390.0752 444.1123 395.2739 c
452.2676 387.5469 496.5645 377.6807 525.6924 387.8145 c
553.583 394.6865 571.626 427.1685 551.6318 452.7285 c
552.3311 446.5322 550.5742 438.8345 548.1895 431.9019 c
540.2813 442.2969 526.6328 443.1826 517.751 429.7124 c
512.7314 469.1016 542.4512 462.3364 555.8125 454.0757 c
581.3652 438.7725 578.3779 403.437 560.9658 380.1025 c
565.1504 396.748 567.2637 411.4619 563.6348 417.5059 c
562.8828 391.6084 557.9502 364.3418 529.1553 358.6211 c
531.5273 363.2246 540.4287 381.3936 532.7266 387.9492 c
526.5137 374.8242 518.1689 360.9551 507.6211 350.1504 c
509.5342 357.9463 511.0508 371.1191 505.5332 381.6699 c
511.3662 344.0303 473.0254 321.5586 442.5469 336.0518 c
411.6758 349.6973 410.5811 385.5137 419.2119 427.8872 c
393.626 421.9893 393.1904 383.6221 402.0801 367.1797 c
347.3955 386.9404 432.6816 502.9312 306.4453 543.1812 c
317.8779 532.106 337.4287 515.21 342.5596 497.7295 c
321.8447 491.251 303.4243 509.0288 289.3237 514.3857 c
289.686 515.6934 305.3994 519.4927 311.7842 518.6436 c
312.6875 526.6294 297.1523 532.0049 290.7793 530.5454 c
316.8066 568.8164 369.2314 541.5469 393.4404 518.5669 c
389.1328 528.3682 367.0527 551.958 325.4717 556.7305 c
343.8672 565.5029 369.6885 563.9712 397.6807 560.1387 c
325.9717 600.6758 275.2295 543.2061 269.9814 522.9351 c
269.9814 522.9351 l
f
0 0.8 0.8 0 k
266.9688 536.5088 m
269.9048 580.9648 315.9082 615.7051 340.1357 623.4297 c
288.1406 625.5962 258.0898 575.877 266.9688 536.5088 c
266.9688 536.5088 l
f
323.1494 581.4629 m
344.9248 591.6973 408.8252 594.3389 427.4727 577.7397 c
407.2656 606.9331 346.7783 600.5332 323.1494 581.4629 c
323.1494 581.4629 l
f
312.1152 544.5601 m
366.415 530.9351 387.0371 479.0654 381.6318 454.6919 c
394.7256 505.0586 352.4707 544.9277 312.1152 544.5601 c
312.1152 544.5601 l
f
419.5322 391.8809 m
424.7695 328.8877 481.6719 333.5625 501.0811 362.5205 c
475.8896 307.4219 403.9746 338.2539 419.5322 391.8809 c
419.5322 391.8809 l
f
280.3608 544.2002 m
293.6309 572.1523 349.957 584.5508 375.6738 570.6157 c
349.1025 593.9736 288.5693 579.8521 280.3608 544.2002 c
280.3608 544.2002 l
f
391.8818 374.9512 m
384.8604 397.9214 392.2266 444.1367 400.5508 475.3623 c
387.6035 459.1655 373.1885 404.3872 391.8818 374.9512 c
391.8818 374.9512 l
f
385.8809 537.2729 m
424.8594 525.9702 447.042 509.6831 457.3398 480.1772 c
457.6914 511.2617 429.3066 537.5195 385.8809 537.2729 c
385.8809 537.2729 l
f
0 0.6 0.6 0 k
269.3784 557.1362 m
277.6685 593.2886 304.1401 615.7051 327.2969 618.606 c
304.7314 621.5747 270.6631 597.3071 269.3784 557.1362 c
269.3784 557.1362 l
f
339.0771 589.7124 m
364.1426 592.7739 386.0273 596.3486 409.1973 590.5562 c
393.498 599.9604 357.2314 597.6919 339.0771 589.7124 c
339.0771 589.7124 l
f
330.0459 538.8862 m
349.3867 529.5723 369.7539 511.5278 378.2129 489.3716 c
376.9658 507.9141 352.1758 533.8237 330.0459 538.8862 c
330.0459 538.8862 l
f
0 0.8 0.8 0 k
482.2598 393.8936 m
458.9414 399.6489 432.415 430.7485 422.7217 463.5552 c
424.8984 436.9009 447.4033 392.9453 482.2598 393.8936 c
482.2598 393.8936 l
f
0.2 1 1 0 k
431.166 421.3848 m
409.0859 453.0566 414.1758 478.1855 388.6797 512.1426 c
420.2422 486.2671 413.7803 461.6558 431.166 421.3848 c
431.166 421.3848 l
f
355.2422 617.4131 m
333.8213 610.5674 295.6284 587.4634 275.9893 553.458 c
288.4971 589.8862 332.1289 618.23 355.2422 617.4131 c
355.2422 617.4131 l
f
0 0.8 0.8 0 k
295.6079 514.8799 m
315.2988 518.5337 321.584 503.4487 337.9463 501.5903 c
326.8896 491.0894 305.9497 510.3018 295.6079 514.8799 c
295.6079 514.8799 l
f
0.2 1 1 0 k
488.4023 366.7939 m
466.7188 363.3506 437.1016 380.7949 421.958 405.8281 c
429.2461 383.4238 457.916 353.334 488.4023 366.7939 c
488.4023 366.7939 l
f
0 0 0 1 k
242.1563 387.8662 m
245.4819 387.8662 248.1768 385.1719 248.1768 381.8467 c
248.1768 378.5215 245.4819 375.8262 242.1563 375.8262 c
238.833 375.8262 236.1367 378.5215 236.1367 381.8467 c
236.1367 385.1719 238.833 387.8662 242.1563 387.8662 c
242.1563 387.8662 l
f
0 0 0 0.2 k
241.3853 385.0313 m
242.9707 385.0313 244.2554 383.7461 244.2554 382.1611 c
244.2554 380.5752 242.9707 379.2891 241.3853 379.2891 c
239.7998 379.2891 238.5142 380.5752 238.5142 382.1611 c
238.5142 383.7461 239.7998 385.0313 241.3853 385.0313 c
241.3853 385.0313 l
f
0 0 0 0 k
240.688 384.3975 m
241.3975 384.3975 241.9727 383.8223 241.9727 383.1113 c
241.9727 382.4033 241.3975 381.8281 240.688 381.8281 c
239.979 381.8281 239.4033 382.4033 239.4033 383.1113 c
239.4033 383.8223 239.979 384.3975 240.688 384.3975 c
240.688 384.3975 l
f
0 0 0 1 k
248.5122 372.5313 m
251.8374 372.5313 254.5327 369.8359 254.5327 366.5117 c
254.5327 363.1865 251.8374 360.4902 248.5122 360.4902 c
245.188 360.4902 242.4922 363.1865 242.4922 366.5117 c
242.4922 369.8359 245.188 372.5313 248.5122 372.5313 c
248.5122 372.5313 l
f
0 0 0 0.2 k
247.7407 369.6953 m
249.3262 369.6953 250.6118 368.4102 250.6118 366.8252 c
250.6118 365.2393 249.3262 363.9531 247.7407 363.9531 c
246.1553 363.9531 244.8701 365.2393 244.8701 366.8252 c
244.8701 368.4102 246.1553 369.6953 247.7407 369.6953 c
247.7407 369.6953 l
f
0 0 0 0 k
247.0435 369.0625 m
247.7529 369.0625 248.3276 368.4873 248.3276 367.7764 c
248.3276 367.0684 247.7529 366.4922 247.0435 366.4922 c
246.334 366.4922 245.7583 367.0684 245.7583 367.7764 c
245.7583 368.4873 246.334 369.0625 247.0435 369.0625 c
247.0435 369.0625 l
f
0 0 0 1 k
242.1533 357.1875 m
245.478 357.1875 248.1738 354.4932 248.1738 351.1689 c
248.1738 347.8447 245.478 345.1484 242.1533 345.1484 c
238.8291 345.1484 236.1333 347.8447 236.1333 351.1689 c
236.1333 354.4932 238.8291 357.1875 242.1533 357.1875 c
242.1533 357.1875 l
f
0 0 0 0.2 k
241.3813 354.3525 m
242.9668 354.3525 244.252 353.0674 244.252 351.4824 c
244.252 349.8965 242.9668 348.6113 241.3813 348.6113 c
239.7964 348.6113 238.5103 349.8965 238.5103 351.4824 c
238.5103 353.0674 239.7964 354.3525 241.3813 354.3525 c
241.3813 354.3525 l
f
0 0 0 0 k
240.6846 353.7188 m
241.3936 353.7188 241.9688 353.1436 241.9688 352.4355 c
241.9688 351.7246 241.3936 351.1494 240.6846 351.1494 c
239.9751 351.1494 239.3994 351.7246 239.3994 352.4355 c
239.3994 353.1436 239.9751 353.7188 240.6846 353.7188 c
240.6846 353.7188 l
f
0 0 0 1 k
226.8213 350.8369 m
230.146 350.8369 232.8413 348.1406 232.8413 344.8164 c
232.8413 341.4912 230.146 338.7969 226.8213 338.7969 c
223.4971 338.7969 220.8008 341.4912 220.8008 344.8164 c
220.8008 348.1406 223.4971 350.8369 226.8213 350.8369 c
226.8213 350.8369 l
f
0 0 0 0.2 k
226.0498 348.001 m
227.6353 348.001 228.9204 346.7158 228.9204 345.1309 c
228.9204 343.5449 227.6353 342.2598 226.0498 342.2598 c
224.4644 342.2598 223.1787 343.5449 223.1787 345.1309 c
223.1787 346.7158 224.4644 348.001 226.0498 348.001 c
226.0498 348.001 l
f
0 0 0 0 k
225.3525 347.3672 m
226.062 347.3672 226.6372 346.792 226.6372 346.082 c
226.6372 345.3721 226.062 344.7988 225.3525 344.7988 c
224.6431 344.7988 224.0679 345.3721 224.0679 346.082 c
224.0679 346.792 224.6431 347.3672 225.3525 347.3672 c
225.3525 347.3672 l
f
0 0 0 1 k
211.4751 357.1875 m
214.7993 357.1875 217.4961 354.4932 217.4961 351.1689 c
217.4961 347.8447 214.7993 345.1484 211.4751 345.1484 c
208.1509 345.1484 205.4551 347.8447 205.4551 351.1689 c
205.4551 354.4932 208.1509 357.1875 211.4751 357.1875 c
211.4751 357.1875 l
f
0 0 0 0.2 k
210.7031 354.3525 m
212.2891 354.3525 213.5737 353.0674 213.5737 351.4824 c
213.5737 349.8965 212.2891 348.6113 210.7031 348.6113 c
209.1182 348.6113 207.832 349.8965 207.832 351.4824 c
207.832 353.0674 209.1182 354.3525 210.7031 354.3525 c
210.7031 354.3525 l
f
0 0 0 0 k
210.0059 353.7188 m
210.7153 353.7188 211.291 353.1436 211.291 352.4355 c
211.291 351.7246 210.7153 351.1494 210.0059 351.1494 c
209.2969 351.1494 208.7217 351.7246 208.7217 352.4355 c
208.7217 353.1436 209.2969 353.7188 210.0059 353.7188 c
210.0059 353.7188 l
f
0 0 0 1 k
211.4751 387.8701 m
214.7993 387.8701 217.4961 385.1748 217.4961 381.8496 c
217.4961 378.5254 214.7993 375.8301 211.4751 375.8301 c
208.1509 375.8301 205.4551 378.5254 205.4551 381.8496 c
205.4551 385.1748 208.1509 387.8701 211.4751 387.8701 c
211.4751 387.8701 l
f
0 0 0 0.2 k
210.7031 385.0342 m
212.2891 385.0342 213.5737 383.749 213.5737 382.1641 c
213.5737 380.5781 212.2891 379.293 210.7031 379.293 c
209.1182 379.293 207.832 380.5781 207.832 382.1641 c
207.832 383.749 209.1182 385.0342 210.7031 385.0342 c
210.7031 385.0342 l
f
0 0 0 0 k
210.0059 384.4014 m
210.7153 384.4014 211.291 383.8252 211.291 383.1162 c
211.291 382.4053 210.7153 381.8311 210.0059 381.8311 c
209.2969 381.8311 208.7217 382.4053 208.7217 383.1162 c
208.7217 383.8252 209.2969 384.4014 210.0059 384.4014 c
210.0059 384.4014 l
f
0 0 0 1 k
205.123 372.5273 m
208.4478 372.5273 211.1436 369.832 211.1436 366.5078 c
211.1436 363.1836 208.4478 360.4873 205.123 360.4873 c
201.7988 360.4873 199.103 363.1836 199.103 366.5078 c
199.103 369.832 201.7988 372.5273 205.123 372.5273 c
205.123 372.5273 l
f
0 0 0 0.2 k
204.3511 369.6934 m
205.9365 369.6934 207.2222 368.4063 207.2222 366.8213 c
207.2222 365.2354 205.9365 363.9502 204.3511 363.9502 c
202.7661 363.9502 201.4805 365.2354 201.4805 366.8213 c
201.4805 368.4063 202.7661 369.6934 204.3511 369.6934 c
204.3511 369.6934 l
f
0 0 0 0 k
203.6548 369.0576 m
204.3638 369.0576 204.9385 368.4824 204.9385 367.7734 c
204.9385 367.0645 204.3638 366.4893 203.6548 366.4893 c
202.9448 366.4893 202.3691 367.0645 202.3691 367.7734 c
202.3691 368.4824 202.9448 369.0576 203.6548 369.0576 c
203.6548 369.0576 l
f
0 0 0 0.5 k
280.5142 252.5498 m
260.9834 282.4873 267.8945 305.6797 282.168 338.5391 c
265.7549 315.8799 247.6279 281.5547 280.5142 252.5498 c
280.5142 252.5498 l
f
0 0 0 0 k
114.0273 444.248 m
130.0195 420.7148 165.7944 404.2324 201.5068 393.0928 c
186.7954 391.8438 115.9873 414.7144 114.0273 444.248 c
114.0273 444.248 l
f
U
/BBAccumRotation (0.000000) XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
